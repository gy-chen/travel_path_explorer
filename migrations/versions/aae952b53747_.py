"""empty message

Revision ID: aae952b53747
Revises: 2b906780fe83
Create Date: 2018-10-02 09:58:47.785118

"""
import csv
import os
import netaddr
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'aae952b53747'
down_revision = '2b906780fe83'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('geolocation')
    geolocation_table = op.create_table('geolocation',
                                        sa.Column(
                                            'network', sa.String(), nullable=False),
                                        sa.Column(
                                            'network_from', sa.Integer()),
                                        sa.Column(
                                            'network_to', sa.Integer()),
                                        sa.Column('lat', sa.Float(),
                                                  nullable=False),
                                        sa.Column('lng', sa.Float(),
                                                  nullable=False),
                                        sa.PrimaryKeyConstraint(
                                            'network_from', 'network_to')
                                        )
    # ### end Alembic commands ###
    geo_gen = geolocation_data()
    while True:
        bulk = []
        try:
            for _ in range(10000):
                bulk.append(next(geo_gen))
        except StopIteration:
            break
        finally:
            op.bulk_insert(geolocation_table, bulk)


def geolocation_data():
    data_path = os.path.join(os.path.dirname(
        __file__), '2b906780fe83_geolocation_data.csv')
    with open(data_path, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                network = netaddr.IPNetwork(row['network'])
                yield {
                    'network': str(network.cidr),
                    'network_from': network.value,
                    'network_to': network.value + len(network),
                    'lat': float(row['latitude']),
                    'lng': float(row['longitude'])
                }
            except ValueError:
                continue


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('geolocation', sa.Column(
        'network', sa.VARCHAR(), nullable=False))
    op.drop_column('geolocation', 'network_to')
    op.drop_column('geolocation', 'network_from')
    # ### end Alembic commands ###
